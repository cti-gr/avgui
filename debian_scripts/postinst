#!/bin/bash
# see: dh_installdeb(1)

set -e

CREATE_TBL_MALWARE="CREATE TABLE tblMalware(
ID INTEGER PRIMARY KEY AUTOINCREMENT,
Name TEXT NOT NULL UNIQUE
)"

CREATE_TBL_VIRUSDBS="CREATE TABLE tblVirusDBs (
ID INTEGER PRIMARY KEY AUTOINCREMENT,
DBVersion TEXT NOT NULL,
DBrDate TEXT NOT NULL)"

CREATE_TABLE_SCANEVENT="CREATE TABLE tblScanEvent (
ID INTEGER PRIMARY KEY AUTOINCREMENT,
User TEXT NOT NULL,
NoOfInfections INTEGER NOT NULL,
NoOfHealings INTEGER NOT NULL,
DateTime TEXT NOT NULL,
VirusDBID INTEGER NOT NULL,
FOREIGN KEY(VirusDBID) REFERENCES tblVirusDBs(ID)
)"

CREATE_TBL_INF="CREATE TABLE tblInfections (
ID INTEGER PRIMARY KEY AUTOINCREMENT,
FilePath TEXT NOT NULL,
Inode INTEGER NOT NULL UNIQUE,
ScanEventID INTEGER NOT NULL,
MalwareID INTEGER NOT NULL,
FOREIGN KEY(ScanEventID) REFERENCES tblScanEvent(ID),
FOREIGN KEY(MalwareID) REFERENCES tblMalware(ID)
)"





echo "USER HOME IS  "  ${USER_HOME}

# summary of how this script can be called:
# * <postinst> `configure' <most-recently-configured-version>
# * <old-postinst> `abort-upgrade' <new version>
# * <conflictor's-postinst> `abort-remove' `in-favour' <package>
# <new-version>
# * <postinst> `abort-remove'
# * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
# <failed-install-package> <version> `removing'
# <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

case "$1" in

configure)
		# echo "checking if python3-pip is installed..."
		# test=$(dpkg-query -l python3-pip | wc -l)
		# echo "test variable is " $test
		# if [ $test -ne 0 ]; then
		#	echo "python3-pip is installed ... will now proceed to installing simpledaemon module"
		# else 
		# 	echo "python3-pip is missing from your system and will now be downloaded and installed"
		#apt-get install python3-pip
		#fi 
		pip3 install simpledaemon && echo "simpledaemon python package has been successfully installed!"
		
		for HOME_U in /home/*?; do
			# Obtain the username
			USER=$( basename ${HOME_U} )
			USER_HOME=/home/$USER
			AVGUIDIR="${USER_HOME}"/.avgui			

			if [ ! -d $AVGUIDIR ]
				then
				echo "Creating user directory of avgui..."
				mkdir -p $AVGUIDIR
			else
				echo "User directory of avgui exists...skipping creation..."
			fi
			if [ ! -d "${AVGUIDIR}"/log ]; then 
				echo "Logging dir of avgui does not exist...will now be created... "
				mkdir -p "${AVGUIDIR}"/log
				touch "${AVGUIDIR}"/log/hellodaemon.log
				touch "${AVGUIDIR}"/log/hellodaemon.conf
				echo '[hello]' >> "${AVGUIDIR}"/log/hellodaemon.conf
				echo 'pidfile = ' "${AVGUIDIR}"/log/hellodaemon.pid  >> "${AVGUIDIR}"/log/hellodaemon.conf
				echo 'logfile = ' "${AVGUIDIR}"/.avgui/log/hellodaemon.log  >> "${USER_HOME}"/.avgui/log/hellodaemon.conf
				echo 'loglevel = 1' >> "${AVGUIDIR}"/log/hellodaemon.conf
			else
				echo "Log dir exists...skipping creation..."
			fi

			if [ ! -f "${AVGUIDIR}"/config.ini ]
				then
				echo "Creating local config file..."
				touch "${AVGUIDIR}"/config.ini
				echo '[Language]' >> "${AVGUIDIR}"/config.ini
				echo "Getting locale and setting program language to English or Greek accordingly"
				LANGUAGE=$(locale | grep LANGUAGE)
				if [ $LANGUAGE=='el_GR' ]
					then
					echo 'lang = EL' >> "${AVGUIDIR}"/config.ini
				else
					echo 'lang = EN' >> "${AVGUIDIR}"/config.ini
			
				fi
			fi
			if [ ! -f "${AVGUIDIR}"/avghistory.sqlite ]
				then
				echo "Creating tables needed to keep avg history"
				sqlite3 "${AVGUIDIR}"/avghistory.sqlite "${CREATE_TBL_MALWARE}; ${CREATE_TBL_VIRUSDBS}; ${CREATE_TABLE_SCANEVENT}; ${CREATE_TBL_INF}"
				echo "Assigning avghistory.sqlite file to user " "${USER}"
				chown -R "${USER}":"${USER}" "${USER_HOME}"/.avgui/
			else
				echo "DB file already exists, keeping the existing one..."
			fi
	done
	;;

abort-upgrade|abort-remove|abort-deconfigure)
		exit 0
	;;

*)
		echo "postinst called with unknown argument \`$1'" >&2
		exit 1
	;;

esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
